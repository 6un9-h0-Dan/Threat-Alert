AWSTemplateFormatVersion: '2010-09-09'
Description: Creates a new VPC and launches FIPs enabled Palo Alto NGFW
Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
  VPCName:
    Type: String
  VPCCIDR:
    Type: String
  VpcAz:
    Type: String
  SSHLocation:
    Type: String
  MgmtSubnetIpBlocks:
    Type: String
  UntrustSubnetIpBlocks:
    Type: String
  TrustSubnetIpBlocks:
    Type: String
  VPNSubnetIpBlocks:
    Type: String
  NATGWSubnetIpBlocks:
    Type: String
  FWInstanceType:
    Type: String
  S3BucketName:
    Type: String
Mappings:
  AWSRegionArch2AMI:
    us-east-1:
      Bundle2: ami-0a946d2c8dacd7ca8
    us-east-2:
      Bundle2: ami-090c76228b9d85790
    us-west-1:
      Bundle2: ami-02866ffea0c6ca92b
    us-west-2:
      Bundle2: ami-02ed3f184712f7e2c
    us-gov-west-1:
      Bundle2: ami-04d6bb561643dd149
    us-gov-east-1:
      Bundle2: ami-0f477955344806aea

  Constants:
    S3URL:
      URL1: https://s3.amazonaws.com
Metadata:
  AWS::CloudFormation::Interface:
    ParameterLabels:
      VPCName:
        default: VPC Name
      VPCCIDR:
        default: CIDR Block for the VPC
      MgmtSubnetIpBlocks:
        default: Management Subnet CIDR Block
      UntrustSubnetIpBlocks:
        default: Untrust Subnet CIDR Block
      TrustSubnetIpBlocks:
        default: Trust Subnet CIDR Block
      NATGWSubnetIpBlocks:
        default: NAT Gateway Subnet CIDR Block
      KeyName:
        default: 'Key pair:'
      SSHLocation:
        default: 'SSH From:'
      NATGatewayAddresses:
        default: 'HTTP Access:'
      FWInstanceType:
        default: Firewall Instance Size
      S3BucketName:
        default: Firewall Bootstrap Bucket
      VpcAz:
        default: Availability Zone
    ParameterGroups:
      - Label:
          default: VPC Configuration
        Parameters:
          - VPCName
          - VpcAzs
          - VPCCIDR
          - MgmtSubnetIpBlocks
          - UntrustSubnetIpBlocks
          - TrustSubnetIpBlocks
          - NATGWSubnetIpBlocks
          - VPNSubnetIpBlocks
          - KeyName
          - SSHLocation
      - Label:
          default: Firewall Configuration
        Parameters:
          - FWLicenseType
          - FWInstanceType
          - S3BucketName
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref 'VPCCIDR'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: MGMT
        - Key: Name
          Value: !Ref 'VPCName'
  NATGWSubnetAz1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref 'VpcAz'
      MapPublicIpOnLaunch: true
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'NATGWSubnetIpBlocks'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: NATGW
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - NATGWSubnetAz1
    DependsOn:
      - VPC
  VPNSubnetAz1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref 'VpcAz'
      MapPublicIpOnLaunch: true
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'VPNSubnetIpBlocks'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: VPN
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - VPNSubnetAz1
    DependsOn:
      - VPC
  MGMTSubnetAz1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref 'VpcAz'
      MapPublicIpOnLaunch: true
      VpcId: !Ref 'VPC'
      CidrBlock: !Ref 'MgmtSubnetIpBlocks'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: MGMT
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - MGMTSubnetAz1
    DependsOn:
      - VPC
  UNTRUSTSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref VpcAz
      VpcId: !Ref VPC
      CidrBlock: !Ref UntrustSubnetIpBlocks
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: UNTRUST
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - UNTRUSTSubnet1
    DependsOn:
      - VPC
  TRUSTSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref VpcAz
      VpcId: !Ref VPC
      CidrBlock: !Ref TrustSubnetIpBlocks
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: TRUST
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - TRUSTSubnet1
    DependsOn:
      - VPC
  sgWideOpen:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Wide open security group
      SecurityGroupIngress:
        - IpProtocol: '-1'
          CidrIp: '0.0.0.0/0'
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: '0.0.0.0/0'
      VpcId: !Ref 'VPC'
  ManagementENISG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Wide open security group
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          ToPort: 443
          FromPort: 443
          CidrIp: !Ref 'SSHLocation'
        - IpProtocol: 'tcp'
          ToPort: 22
          FromPort: 22
          CidrIp: !Ref 'SSHLocation'
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: '0.0.0.0/0'
      VpcId: !Ref 'VPC'
  KMSKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws-us-gov:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
  KMSAlias:
    DependsOn: KMSKey
    Type: AWS::KMS::Alias
    Properties: 
      AliasName: !Sub 'alias/${AWS::StackName}'
      TargetKeyId: !Ref KMSKey 
  MGMTInterface:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Wide open security group
      SecurityGroupIngress:
        - IpProtocol: '-1'
          CidrIp: '0.0.0.0/0'
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: '0.0.0.0/0'
      VpcId: !Ref 'VPC'
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: MGMT
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - InternetGateway
  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
    DependsOn:
      - InternetGateway
  NATGWRouteTableAz1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - NATGWRouteTableAz1
    DependsOn:
      - VPC
  NAT1SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'NATGWSubnetAz1'
      RouteTableId: !Ref 'NATGWRouteTableAz1'
    DependsOn:
      - NATGWRouteTableAz1
      - NATGWSubnetAz1
  VPNSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'VPNSubnetAz1'
      RouteTableId: !Ref 'NATGWRouteTableAz1'
    DependsOn:
      - NATGWRouteTableAz1
      - NATGWSubnetAz1
  EIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn:
      - VPC
      - GatewayToInternet
      - InternetGateway
  MGMTEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn:
      - VPC
      - GatewayToInternet
      - InternetGateway
  VPNEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn:
      - VPC
      - GatewayToInternet
      - InternetGateway
  NAT1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'EIP1.AllocationId'
      SubnetId: !Ref 'NATGWSubnetAz1'
    DependsOn:
      - VPC
      - EIP1
      - NATGWSubnetAz1
      - GatewayToInternet
  MGMTRouteTableAz1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - MGMTRouteTableAz1
    DependsOn:
      - VPC
  RoutetoInternet:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref NATGWRouteTableAz1
    DependsOn: 
      - NATGWRouteTableAz1
      - InternetGateway
  MGMTRouteNAT1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'MGMTRouteTableAz1'
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NAT1'
    DependsOn:
      - NAT1
  MGMTSubnetRouteTableAssociationNAT1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'MGMTSubnetAz1'
      RouteTableId: !Ref 'NATGWRouteTableAz1'
    DependsOn:
      - MGMTRouteNAT1
      - MGMTSubnetAz1
  UNTRUSTRouteTableAz1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - UNTRUSTRouteTableAz1
    DependsOn:
      - VPC
  UNTRUSTRouteNAT1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'UNTRUSTRouteTableAz1'
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NAT1'
    DependsOn:
      - NAT1
  UNTRUSTSubnetRouteTableAssociationNAT1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'UNTRUSTSubnet1'
      RouteTableId: !Ref 'UNTRUSTRouteTableAz1'
    DependsOn:
      - UNTRUSTRouteNAT1
      - UNTRUSTSubnet1
  TrustRouteTableAz1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: TRUST
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - TrustRouteTableAz1
    DependsOn:
      - VPC
  TrustRouteNAT1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref 'TrustRouteTableAz1'
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref 'NAT1'
    DependsOn:
      - NAT1
  TRUSTSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'TRUSTSubnet1'
      RouteTableId: !Ref 'TrustRouteTableAz1'
    DependsOn:
      - TRUSTSubnet1
  FW1ManagementNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: AWS FW1 MGMT
      SubnetId: !Ref 'MGMTSubnetAz1'
      SourceDestCheck: 'false'
      GroupSet:
        - !Ref 'ManagementENISG'
      Tags:
        - Key: Name
          Value: AWS FW1 MGMT
    DependsOn:
      - ManagementENISG
  FW1UntrustNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: AWS FW1 E1/1
      SubnetId: !Ref 'UNTRUSTSubnet1'
      SourceDestCheck: 'false'
      GroupSet:
        - !Ref 'sgWideOpen'
      Tags:
        - Key: Name
          Value: AWS FW1 E1/1
    DependsOn:
      - sgWideOpen
  FW1TrustNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: AWS FW1 E1/2
      SubnetId: !Ref 'TRUSTSubnet1'
      SourceDestCheck: 'false'
      GroupSet:
        - !Ref 'sgWideOpen'
      Tags:
        - Key: Name
          Value: AWS FW1 E1/2
    DependsOn:
      - sgWideOpen
  FW1VPNNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: AWS FW1 E1/3
      SubnetId: !Ref 'VPNSubnetAz1'
      SourceDestCheck: 'false'
      GroupSet:
        - !Ref 'sgWideOpen'
      Tags:
        - Key: Name
          Value: AWS FW1 E1/3
    DependsOn:
      - sgWideOpen
  VPNEIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties: 
      AllocationId: !GetAtt VPNEIP.AllocationId
      NetworkInterfaceId: !Ref FW1VPNNetworkInterface
    DependsOn:
      - FW1VPNNetworkInterface
  MGMTIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties: 
      AllocationId: !GetAtt MGMTEIP.AllocationId
      NetworkInterfaceId: !Ref FW1ManagementNetworkInterface
    DependsOn:
      - FW1VPNNetworkInterface
  EC2IamRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: fwbootstraps3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 's3:getobject'
                Resource: !Sub 'arn:aws-us-gov:s3:::${S3BucketName}'
              - Effect: Allow
                Action: 's3:listbucket'
                Resource: !Sub 'arn:aws-us-gov:s3:::${S3BucketName}'
  FWInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref EC2IamRole  
  FW1Instance:
    Type: AWS::EC2::Instance
    Properties:
      DisableApiTermination: 'false'
      IamInstanceProfile: !Ref FWInstanceProfile
      InstanceInitiatedShutdownBehavior: stop
      EbsOptimized: 'true'
      ImageId: !FindInMap
        - AWSRegionArch2AMI
        - !Ref AWS::Region
        - 'Bundle2'
      InstanceType: !Ref 'FWInstanceType'
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            DeleteOnTermination: 'true'
            VolumeSize: '60'
            Encrypted: 'true'
            KmsKeyId: !Ref KMSKey
      KeyName: !Ref 'KeyName'
      Monitoring: 'false'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'AWS::StackName'
              - FW1
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref 'FW1UntrustNetworkInterface'
          DeviceIndex: 0
        - NetworkInterfaceId: !Ref 'FW1ManagementNetworkInterface'
          DeviceIndex: 1
        - NetworkInterfaceId: !Ref 'FW1TrustNetworkInterface'
          DeviceIndex: 2
        - NetworkInterfaceId: !Ref 'FW1VPNNetworkInterface'
          DeviceIndex: 3
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - vmseries-bootstrap-aws-s3bucket=
            - !Ref S3BucketName
    DependsOn:
      - FW1ManagementNetworkInterface
      - FW1UntrustNetworkInterface
      - FW1TrustNetworkInterface
      - MGMTSubnetRouteTableAssociationNAT1