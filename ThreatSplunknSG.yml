AWSTemplateFormatVersion: '2010-09-09'
Description: 'stackArmor threatAlert - template to launch VPC and ThreatAlert/ NOTE:-
  Subscribe to CIS Amazon linux Benchmark v2.0.0-level1 '
Parameters:

  VPCCidr:
    Type: String
  AvailabilityZones: 
    Type: CommaDelimitedList
  KeyNameN: 
    Type: "AWS::EC2::KeyPair::KeyName"
  RemGate:
    Type: String
  SplunkType:
    Type: String
  SplunkImage:
    Type: String
  ThreatType:
    Type: String
  ThreatImage:
    Type: String
  BastionType: 
    Type: String
  BastionImage: 
    Type: String
  CidrBlock1:
    Type: String
  CidrBlock2:
    Type: String
  MicroADPW:
    Type: String
  DataSubnet1:
    Type: String
  DataSubnet2:
    Type: String
  DSSubnetOne:
    Type: String
  DSSubnetTwo:
    Type: String
  DomainDNSName:
    Type: String
  FedClassification:
    Type: String



Mappings:

  AWSAMIRegionMap:
    AMI:
      WS2016FULLBASE: Windows_Server-2016-English-Full-Base-2019.02.13
    ap-northeast-1:
      WS2016FULLBASE: ami-0644ce62fdce33d7a
    ap-northeast-2:
      WS2016FULLBASE: ami-0b06750f7ff166ef5
    ap-south-1:
      WS2016FULLBASE: ami-0be56865bcf08da0d
    ap-southeast-1:
      WS2016FULLBASE: ami-0611ad6dad5ec3418
    ap-southeast-2:
      WS2016FULLBASE: ami-0148c6490018d612f
    ca-central-1:
      WS2016FULLBASE: ami-09b27c4b76404544f
    eu-central-1:
      WS2016FULLBASE: ami-083c458e2cc1adc40
    eu-west-1:
      WS2016FULLBASE: ami-0e60ba06451c1b981
    eu-west-2:
      WS2016FULLBASE: ami-0186531b707ced2ef
    eu-west-3:
      WS2016FULLBASE: ami-04f6c3a108e0d348b
    sa-east-1:
      WS2016FULLBASE: ami-05c6c992668058be2
    us-east-1:
      WS2016FULLBASE: ami-0db24bfd419899dc1
    us-east-2:
      WS2016FULLBASE: ami-08b4a0f6e106c1dba
    us-west-1:
      WS2016FULLBASE: ami-0f825806081c4725c
    us-west-2:
      WS2016FULLBASE: ami-0af80d239cc063c12
    us-gov-west-1:
      WS2016FULLBASE: ami-6bd2bd0a

  # ThreatAlertAMIRegionMap:
  #   AMI:
  #     ThreatAlertAMI: Windows_Server-2016-English-Full-Base-2019.02.13
  #   us-east-1:
  #     ThreatAlertAMI: ami-02a867cfe4470dd2b
  #   us-east-2:
  #     ThreatAlertAMI: ami-08b4a0f6e106c1dba
  #   us-west-1:
  #     ThreatAlertAMI: ami-0f825806081c4725c
  #   us-west-2:
  #     ThreatAlertAMI: ami-0af80d239cc063c12
  #   us-gov-west-1:
  #     ThreatAlertAMI: ami-5ba3d63a

  Region2Principal:
    us-east-1:
      "EC2Principal": "ec2.amazonaws.com"
    us-west-2:
      "EC2Principal": "ec2.amazonaws.com"
    us-west-1:
      "EC2Principal": "ec2.amazonaws.com"
    us-gov-west-1:
      "EC2Principal": "ec2.amazonaws.com"

Conditions:
  GovCloudCondition: !Equals
    - !Ref 'AWS::Region'
    - us-gov-west-1


Resources:

  ThreatAlertHostProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - DirectoryEC2SSMRole
      InstanceProfileName: DirectoryEC2SSMRole
    DependsOn: ThreatAlertEC2SSMRole
  ThreatAlertEC2SSMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      RoleName: DirectoryEC2SSMRole

  ThreatAlertVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref 'VPCCidr'
      Tags:
        - Key: Name
          Value: threatAlert-vpc

  ThreatAlertDHCP:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: !Ref 'DomainDNSName'
      DomainNameServers: !GetAtt ThreatAlertDirectory.DnsIpAddresses
      NtpServers:
        - 129.6.15.28
        - 129.6.15.29
    DependsOn: ThreatAlertDirectory

  ThreatAlertDHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId:
        Ref: ThreatAlertVPC
      DhcpOptionsId:
        Ref: ThreatAlertDHCP


  ThreatAlertEC2SSMRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - ec2.amazonaws.com
              Action:
                - sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        RoleName: DirectoryEC2SSMRole

  BastionServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref BastionImage
      InstanceType: !Ref BastionType
      SsmAssociations: 
        -
          DocumentName: 
            Ref: "ThreatAlertSSMDoc"
      KeyName: !Ref 'KeyNameN'
      # UserData: 
      #   FN::Base64: !sub
      #       - <script>\n
      #       - 'cd C:\Users\Public\cloud-apps-landing-page'
      #       - 'node server.js'
      #       - \n
      #       - </script>
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - Ref: "RemoteDesktopGatewaySG"
          SubnetId:
            Ref: 'ThreatAlertSN1'
      IamInstanceProfile: !Ref 'ThreatAlertHostProfile'
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            Encrypted: True
            VolumeSize: 50
      Tags:
        - Key: Name
          Value: Bastion-Server
        - Key: Classification
          Value: !Ref 'FedClassification'
    DependsOn: 
      - ThreatAlertDirectory
      - ThreatAlertSSMDoc

  ThreatAlertInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: ThreatAlertInternetGateway

  ThreatAlertVPCGatewayAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref 'ThreatAlertInternetGateway'
      VpcId: !Ref 'ThreatAlertVPC'
    DependsOn:
      - ThreatAlertVPC
      - ThreatAlertInternetGateway

  ThreatAlertSN1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'ThreatAlertVPC'
      CidrBlock: !Ref 'CidrBlock1'
      Tags:
        - Key: Name
          Value: threatAlert-subnet-01
    DependsOn: ThreatAlertVPC

  ThreatAlertSubnetSelection:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'ThreatAlertVPC'
      CidrBlock: !Ref 'CidrBlock2'
      Tags:
        - Key: Name
          Value: threatAlert-subnet-02
    DependsOn: ThreatAlertVPC

  ThreatAlertRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'ThreatAlertVPC'
      Tags:
        - Key: Name
          Value: ThreatAlert-RouteTable1

  threatAlertPrivateRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'ThreatAlertVPC'
      Tags:
        - Key: Name
          Value: ThreatAlert-Private-RouteTable

  ThreatAlertRoute1:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      RouteTableId: !Ref 'ThreatAlertRT'
      GatewayId: !Ref 'ThreatAlertInternetGateway'
    DependsOn:
      - ThreatAlertInternetGateway
      - ThreatAlertRT
  
  ThreatAlertRoute2:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: '0.0.0.0/0'
      RouteTableId: !Ref 'threatAlertPrivateRT'
      NatGatewayId: !Ref 'ThreatAlertprodNatGateway'
    DependsOn:
      - ThreatAlertprodNatGateway
      - threatAlertPrivateRT

  ThreatAlertSubRoute:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'ThreatAlertRT'
      SubnetId: !Ref 'ThreatAlertSN1'

  ThreatAlertSubRoute2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'threatAlertPrivateRT'
      SubnetId: !Ref 'ThreatAlertSubnetSelection'

  DBISubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'ThreatAlertVPC'
      AvailabilityZone: 
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""      
      CidrBlock: !Ref 'DataSubnet1'
      Tags:
        - Key: Name
          Value: ThreatAlert-dbsubnet-01
    DependsOn: ThreatAlertVPC

  DBISubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'ThreatAlertVPC'
      CidrBlock: !Ref 'DataSubnet2'
      AvailabilityZone: 
        Fn::Select: 
          - 1
          - Fn::GetAZs: "" 
      Tags:
        - Key: Name
          Value: threatAlert-dbsubnet-02
    DependsOn: ThreatAlertVPC

  DBISubRoute:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'DBISubnetRT'
      SubnetId: !Ref 'DBISubnet1'

  DBISubRoute2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'DBISubnetRT'
      SubnetId: !Ref 'DBISubnet2'

  DBISubnetRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'ThreatAlertVPC'
      Tags:
        - Key: Name
          Value: ThreatAlert-DB-RouteTable1

  DBIRoute1:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      RouteTableId: !Ref 'DBISubnetRT'
      GatewayId: !Ref 'ThreatAlertInternetGateway'
    DependsOn:
      - ThreatAlertInternetGateway
      - ThreatAlertRT


  DirectorySubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'ThreatAlertVPC'
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: !Ref 'DSSubnetOne'
      Tags:
        - Key: Name
          Value: ThreatAlert-Directory-subnet-01
    DependsOn: ThreatAlertVPC

  DirectorySubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      VpcId: !Ref 'ThreatAlertVPC'
      CidrBlock: !Ref 'DSSubnetTwo'
      Tags:
        - Key: Name
          Value: threatAlert-Directory-subnet-02

    DependsOn: ThreatAlertVPC

  DSSubnetRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'ThreatAlertVPC'
      Tags:
        - Key: Name
          Value: ThreatAlert-Directory-RouteTable1

  DSRoute1:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      RouteTableId: !Ref 'DSSubnetRT'
      NatGatewayId:
        Ref: 'ThreatAlertprodNatGateway'

  DSSubRoute:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'DSSubnetRT'
      SubnetId: !Ref 'DirectorySubnet1'

  DSSubRoute2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'DSSubnetRT'
      SubnetId: !Ref 'DirectorySubnet2'

  ThreatAlertDirectory:
    Type: AWS::DirectoryService::MicrosoftAD
    Properties:
      Name: !Ref 'DomainDNSName'
      Edition: "Standard"
      Password:
        Ref: MicroADPW
      VpcSettings:
        VpcId:
          Ref: ThreatAlertVPC
        SubnetIds:
        - Ref: DirectorySubnet1
        - Ref: DirectorySubnet2
   

  ThreatAlertSSMDoc:
    Type: AWS::SSM::Document
    Properties:
      Content:
        schemaVersion: '1.2'
        description: Join instances to an AWS Directory Service Domain
        runtimeConfig:
          aws:domainJoin:
            properties:
              directoryId: !Ref 'ThreatAlertDirectory'
              directoryName: !Ref 'DomainDNSName'
              dnsIpAddresses:  !GetAtt ThreatAlertDirectory.DnsIpAddresses
    DependsOn: ThreatAlertDirectory
  
  ThreatAlertEIPForNatGateway:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  ThreatAlertprodNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'ThreatAlertEIPForNatGateway.AllocationId'
      SubnetId: !Ref 'ThreatAlertSN1'
      Tags:
        - Key: Name
          Value: ThreatAlert-prod-Nat-Gateway

  RemoteDesktopGatewaySG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable RDP access from the Internet
      VpcId: !Ref 'ThreatAlertVPC'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: !Ref 'RemGate'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref 'RemGate'
        - IpProtocol: udp
          FromPort: 3391
          ToPort: 3391
          CidrIp: !Ref 'RemGate'
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: !Ref 'RemGate'

  ThreatAlertSplunkSG:
    Type: AWS::EC2::SecurityGroup
    DependsOn: RemoteDesktopGatewaySG
    Properties:
      GroupDescription: Splunk Base Security Group
      GroupName: ThreatAlertSplunkSG
      VpcId: !Ref 'ThreatAlertVPC'
      Tags:
        - Key: Name
          Value: ThreatAlert-splunk-sg
      SecurityGroupIngress:
        - IpProtocol: tcp
          SourceSecurityGroupId: !Ref 'RemoteDesktopGatewaySG'
          FromPort: '22'
          ToPort: '22'
        - IpProtocol: tcp
          SourceSecurityGroupId: !Ref 'RemoteDesktopGatewaySG'
          FromPort: '8000'
          ToPort: '8000'

  ThreatAlertSG:
    Type: AWS::EC2::SecurityGroup
    DependsOn: RemoteDesktopGatewaySG
    Properties:
      GroupDescription: Splunk Base Security Group
      GroupName: ThreatAlertSecurityGroup
      VpcId: !Ref 'ThreatAlertVPC'
      Tags:
        - Key: Name
          Value: ThreatAlert-sg
      SecurityGroupIngress:
        - IpProtocol: tcp
          SourceSecurityGroupId: !Ref 'RemoteDesktopGatewaySG'
          FromPort: '22'
          ToPort: '22'
        - IpProtocol: tcp
          SourceSecurityGroupId: !Ref 'RemoteDesktopGatewaySG'
          FromPort: '443'
          ToPort: '443'

  ThreatAlertSplunkEC2Role:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: ThreatAlertSplunkEC2Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      Policies:
        - PolicyName: sata-splunk-ec2-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:GetQueueAttributes
                  - sqs:ListQueues
                  - sqs:ReceiveMessage
                  - sqs:GetQueueUrl
                  - sqs:SendMessage
                  - sqs:DeleteMessage
                  - s3:ListBucket
                  - s3:GetObject
                  - s3:GetBucketLocation
                  - s3:ListAllMyBuckets
                  - s3:GetBucketTagging
                  - s3:GetAccelerateConfiguration
                  - s3:GetBucketLogging
                  - s3:GetLifecycleConfiguration
                  - s3:GetBucketCORS
                  - config:DeliverConfigSnapshot
                  - config:DescribeConfigRules
                  - config:DescribeConfigRuleEvaluationStatus
                  - config:GetComplianceDetailsByConfigRule
                  - config:GetComplianceSummaryByConfigRule
                  - iam:GetUser
                  - iam:ListUsers
                  - iam:GetAccountPasswordPolicy
                  - iam:ListAccessKeys
                  - iam:GetAccessKeyLastUsed
                  - autoscaling:Describe*
                  - cloudwatch:Describe*
                  - cloudwatch:Get*
                  - cloudwatch:List*
                  - sns:Get*
                  - sns:List*
                  - sns:Publish
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:GetLogEvents
                  - ec2:DescribeInstances
                  - ec2:DescribeReservedInstances
                  - ec2:DescribeSnapshots
                  - ec2:DescribeRegions
                  - ec2:DescribeKeyPairs
                  - ec2:DescribeNetworkAcls
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeSubnets
                  - ec2:DescribeVolumes
                  - ec2:DescribeVpcs
                  - ec2:DescribeImages
                  - ec2:DescribeAddresses
                  - lambda:ListFunctions
                  - rds:DescribeDBInstances
                  - cloudfront:ListDistributions
                  - elasticloadbalancing:DescribeLoadBalancers
                  - elasticloadbalancing:DescribeInstanceHealth
                  - elasticloadbalancing:DescribeTags
                  - elasticloadbalancing:DescribeTargetGroups
                  - elasticloadbalancing:DescribeTargetHealth
                  - elasticloadbalancing:DescribeListeners
                  - inspector:Describe*
                  - inspector:List*
                  - kinesis:Get*
                  - kinesis:DescribeStream
                  - kinesis:ListStreams
                  - kms:Decrypt
                  - sts:AssumeRole
                Resource:
                  - '*'

  ThreatAlertRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: !FindInMap
                - Region2Principal
                - !Ref 'AWS::Region'
                - EC2Principal
            Action:
              - sts:AssumeRole
      Path: /
      RoleName: ThreatAlertRole

  ThreatRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: sa-ThreatAlertPolicy
      PolicyDocument:
        Statement:
          - Action:
              - acm:describecertificate
              - acm:listcertificates
              - cloudtrail:DescribeTrails
              - cloudtrail:GetTrailStatus
              - cloudtrail:LookupEvents
              - config:describeconfigrules
              - config:describeconfigurationrecorders
              - directconnect:describeconnections
              - ec2:describeaddresses
              - ec2:describedhcpoptions
              - ec2:describeflowlogs
              - ec2:describeimages
              - ec2:describeinstances
              - ec2:describeinternetgateways
              - ec2:describekeypairs
              - ec2:describenatgateways
              - ec2:describenetworkacls
              - ec2:describenetworkinterfaces
              - ec2:describeregions
              - ec2:describeroutetables
              - ec2:describesecuritygroups
              - ec2:describesnapshots
              - ec2:DescribeSnapshotAttribute
              - ec2:describesubnets
              - ec2:describetags
              - ec2:describevolumes
              - ec2:describevpcendpoints
              - ec2:describevpcpeeringconnections
              - ec2:describevpcs
              - ec2:describevpnconnections
              - ec2:describevpngateways
              - elasticloadbalancing:describeloadbalancerattributes
              - elasticloadbalancing:describeloadbalancerpolicies
              - elasticloadbalancing:describeloadbalancers
              - elasticloadbalancing:describelisteners
              - elasticloadbalancing:describerules
              - elasticloadbalancing:describesslpolicies
              - elasticloadbalancing:describetags
              - elasticloadbalancing:describetargetgroups
              - elasticloadbalancing:describetargetgroupattributes
              - elasticloadbalancing:describetargethealth
              - es:describeelasticsearchdomainconfig
              - es:listdomainnames
              - glacier:DescribeVault
              - glacier:GetVaultAccessPolicy
              - glacier:ListTagsForVault
              - glacier:ListVaults
              - iam:GetAccountPasswordPolicy
              - iam:getaccesskeylastused
              - iam:getgroup
              - iam:getgrouppolicy
              - iam:getloginprofile
              - iam:getpolicyversion
              - iam:getrole
              - iam:getrolepolicy
              - iam:GetSAMLProvider
              - iam:getservercertificate
              - iam:getuser
              - iam:getuserpolicy
              - iam:listaccesskeys
              - iam:listattachedgrouppolicies
              - iam:listattachedrolepolicies
              - iam:listattacheduserpolicies
              - iam:listentitiesforpolicy
              - iam:listgrouppolicies
              - iam:listgroups
              - iam:listinstanceprofilesforrole
              - iam:listmfadevices
              - iam:listpolicies
              - iam:listrolepolicies
              - iam:listroles
              - iam:listsamlproviders
              - iam:listservercertificates
              - iam:listsigningcertificates
              - iam:listuserpolicies
              - iam:listusers
              - kms:describekey
              - kms:getkeypolicy
              - kms:getkeyrotationstatus
              - kms:listaliases
              - kms:listgrants
              - kms:listkeypolicies
              - kms:listkeys
              - lambda:getfunctionconfiguration
              - lambda:getpolicy
              - lambda:listaliases
              - lambda:listeventsourcemappings
              - lambda:listtags
              - lambda:listversionsbyfunction
              - lambda:listfunctions
              - rds:describedbclusters
              - rds:describedbclustersnapshots
              - rds:describedbinstances
              - rds:describedbsecuritygroups
              - rds:describedbsnapshots
              - rds:describedbsnapshotattributes
              - rds:describedbsubnetgroups
              - redshift:describeclusters
              - route53:listhostedzones
              - route53:listresourcerecordsets
              - route53domains:listdomains
              - route53domains:getdomaindetail
              - s3:getaccelerateconfiguration
              - s3:getbucketacl
              - s3:getbucketcors
              - s3:getbucketlocation
              - s3:getbucketlogging
              - s3:getbucketnotification
              - s3:getbucketpolicy
              - s3:getbuckettagging
              - s3:getbucketversioning
              - s3:getbucketwebsite
              - s3:getlifecycleconfiguration
              - s3:listbucket
              - s3:listallmybuckets
              - s3:getreplicationconfiguration
              - s3:getanalyticsconfiguration
              - s3:getmetricsconfiguration
              - s3:getinventoryconfiguration
              - ses:getidentityverificationattributes
              - ses:listidentities
              - ses:listverifiedemailaddresses
              - ses:sendemail
              - sns:gettopicattributes
              - sns:listsubscriptionsbytopic
              - sns:listtopics
              - sqs:getqueueattributes
              - sqs:listqueues
            Effect: Allow
            Resource: '*'
      Roles:
        - !Ref 'ThreatAlertRole'

  ThreatAlertSplunkInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'ThreatAlertSplunkEC2Role'

  ThreatAlertGSSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'ThreatAlertEC2Role'
      InstanceProfileName: ThreatAlertGSSInstanceProfile
    DependsOn: ThreatAlertEC2Role

  ThreatAlertGSSProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'ThreatAlertRole'
      InstanceProfileName: ThreatAlertGSSProfile

  ThreatAlertSplunkServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref 'SplunkImage'
      IamInstanceProfile: !Ref 'ThreatAlertSplunkInstanceProfile'
      InstanceType: !Ref 'SplunkType'
      KeyName: !Ref 'KeyNameN'
      SecurityGroupIds:
        - !Ref 'ThreatAlertSplunkSG'
      Tags:
        - Key: Name
          Value: ThreatAlert-Splunk-Server
        - Key: Classification
          Value: !Ref 'FedClassification'
      SubnetId: !Ref 'ThreatAlertSN1'

  ThreatAlertEC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      RoleName: ThreatAlertEC2Role

  ThreatAlertScanner:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: !FindInMap
                - Region2Principal
                - !Ref 'AWS::Region'
                - EC2Principal
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:role/ThreatAlertEC2Role'
            Action:
              - sts:AssumeRole
      Path: /
      RoleName: ThreatAlertScanner

    DependsOn: ThreatAlertEC2Role

  ThreatRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: sa-ThreatAlertPolicy
      PolicyDocument:
        Statement:
          - Action:
              - acm:describecertificate
              - acm:listcertificates
              - cloudtrail:DescribeTrails
              - cloudtrail:GetTrailStatus
              - cloudtrail:LookupEvents
              - config:describeconfigrules
              - config:describeconfigurationrecorders
              - directconnect:describeconnections
              - ec2:describeaddresses
              - ec2:describedhcpoptions
              - ec2:describeflowlogs
              - ec2:describeimages
              - ec2:describeinstances
              - ec2:describeinternetgateways
              - ec2:describekeypairs
              - ec2:describenatgateways
              - ec2:describenetworkacls
              - ec2:describenetworkinterfaces
              - ec2:describeregions
              - ec2:describeroutetables
              - ec2:describesecuritygroups
              - ec2:describesnapshots
              - ec2:DescribeSnapshotAttribute
              - ec2:describesubnets
              - ec2:describetags
              - ec2:describevolumes
              - ec2:describevpcendpoints
              - ec2:describevpcpeeringconnections
              - ec2:describevpcs
              - ec2:describevpnconnections
              - ec2:describevpngateways
              - elasticloadbalancing:describeloadbalancerattributes
              - elasticloadbalancing:describeloadbalancerpolicies
              - elasticloadbalancing:describeloadbalancers
              - elasticloadbalancing:describelisteners
              - elasticloadbalancing:describerules
              - elasticloadbalancing:describesslpolicies
              - elasticloadbalancing:describetags
              - elasticloadbalancing:describetargetgroups
              - elasticloadbalancing:describetargetgroupattributes
              - elasticloadbalancing:describetargethealth
              - es:describeelasticsearchdomainconfig
              - es:listdomainnames
              - glacier:DescribeVault
              - glacier:GetVaultAccessPolicy
              - glacier:ListTagsForVault
              - glacier:ListVaults
              - iam:GetAccountPasswordPolicy
              - iam:getaccesskeylastused
              - iam:getgroup
              - iam:getgrouppolicy
              - iam:getloginprofile
              - iam:getpolicyversion
              - iam:getrole
              - iam:getrolepolicy
              - iam:GetSAMLProvider
              - iam:getservercertificate
              - iam:getuser
              - iam:getuserpolicy
              - iam:listaccesskeys
              - iam:listattachedgrouppolicies
              - iam:listattachedrolepolicies
              - iam:listattacheduserpolicies
              - iam:listentitiesforpolicy
              - iam:listgrouppolicies
              - iam:listgroups
              - iam:listinstanceprofilesforrole
              - iam:listmfadevices
              - iam:listpolicies
              - iam:listrolepolicies
              - iam:listroles
              - iam:listsamlproviders
              - iam:listservercertificates
              - iam:listsigningcertificates
              - iam:listuserpolicies
              - iam:listusers
              - kms:describekey
              - kms:getkeypolicy
              - kms:getkeyrotationstatus
              - kms:listaliases
              - kms:listgrants
              - kms:listkeypolicies
              - kms:listkeys
              - lambda:getfunctionconfiguration
              - lambda:getpolicy
              - lambda:listaliases
              - lambda:listeventsourcemappings
              - lambda:listtags
              - lambda:listversionsbyfunction
              - lambda:listfunctions
              - rds:describedbclusters
              - rds:describedbclustersnapshots
              - rds:describedbinstances
              - rds:describedbsecuritygroups
              - rds:describedbsnapshots
              - rds:describedbsnapshotattributes
              - rds:describedbsubnetgroups
              - redshift:describeclusters
              - route53:listhostedzones
              - route53:listresourcerecordsets
              - route53domains:listdomains
              - route53domains:getdomaindetail
              - s3:getaccelerateconfiguration
              - s3:getbucketacl
              - s3:getbucketcors
              - s3:getbucketlocation
              - s3:getbucketlogging
              - s3:getbucketnotification
              - s3:getbucketpolicy
              - s3:getbuckettagging
              - s3:getbucketversioning
              - s3:getbucketwebsite
              - s3:getlifecycleconfiguration
              - s3:listbucket
              - s3:listallmybuckets
              - s3:getreplicationconfiguration
              - s3:getanalyticsconfiguration
              - s3:getmetricsconfiguration
              - s3:getinventoryconfiguration
              - ses:getidentityverificationattributes
              - ses:listidentities
              - ses:listverifiedemailaddresses
              - ses:sendemail
              - sns:gettopicattributes
              - sns:listsubscriptionsbytopic
              - sns:listtopics
              - sqs:getqueueattributes
              - sqs:listqueues
            Effect: Allow
            Resource: '*'
      Roles:
        - !Ref 'ThreatAlertScanner'

  ThreatAlertServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref 'ThreatImage'
      InstanceType: !Ref 'ThreatType'
      SsmAssociations: 
        -
          DocumentName: 
            Ref: "ThreatAlertSSMDoc" 
      KeyName: !Ref 'KeyNameN'
      IamInstanceProfile: !Ref 'ThreatAlertGSSInstanceProfile'
      SecurityGroupIds:
        - !Ref 'ThreatAlertSG'
      SubnetId: !Ref 'ThreatAlertSubnetSelection'
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            Encrypted: True
            VolumeSize: 30
      Tags:
        - Key: Name
          Value: ThreatAlert-Server
        - Key: Classification
          Value: !Ref 'FedClassification'
    DependsOn: ThreatAlertSSMDoc
      


  RecoveryAlarmThreatAlert:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Trigger a recovery when instance status check fails for 15
        consecutive minutes.
      Namespace: AWS/EC2
      MetricName: StatusCheckFailed_System
      Statistic: Minimum
      Period: '60'
      EvaluationPeriods: '15'
      ComparisonOperator: GreaterThanThreshold
      Threshold: '0'
      AlarmActions: [ !Sub "arn:aws:automate:${AWS::Region}:ec2:recover" ]
      Dimensions:
      - Name: InstanceId
        Value:
          Ref: ThreatAlertServer
  

  RecoveryAlarmSplunk:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Trigger a recovery when instance status check fails for 15
        consecutive minutes.
      Namespace: AWS/EC2
      MetricName: StatusCheckFailed_System
      Statistic: Minimum
      Period: '60'
      EvaluationPeriods: '15'
      ComparisonOperator: GreaterThanThreshold
      Threshold: '0'
      AlarmActions: [ !Sub "arn:aws:automate:${AWS::Region}:ec2:recover" ]
      Dimensions:
      - Name: InstanceId
        Value:
          Ref: ThreatAlertSplunkServer

  CPUAlarmThreatAlert:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: CPU alarm for my instance
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '3'
      Threshold: '90'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: InstanceId
        Value:
          Ref: ThreatAlertServer

  CPUAlarmBastion:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: CPU alarm for my instance
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '3'
      Threshold: '90'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: InstanceId
        Value:
          Ref: BastionServer

  RecoveryAlarmBastion:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Trigger a recovery when instance status check fails for 15 consecutive minutes.
      Namespace: AWS/EC2
      MetricName: StatusCheckFailed_System
      Statistic: Minimum
      Period: '60'
      EvaluationPeriods: '15'
      ComparisonOperator: GreaterThanThreshold
      Threshold: '1'
      AlarmActions: [ !Sub "arn:aws:automate:${AWS::Region}:ec2:recover" ]
      Dimensions:
      - Name: InstanceId
        Value:
          Ref: BastionServer


  CPUAlarmSplunk:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: CPU alarm for my instance
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '3'
      Threshold: '90'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: InstanceId
        Value:
          Ref: ThreatAlertSplunkServer

  SonarQubeSG:
    Type: AWS::EC2::SecurityGroup
    DependsOn: RemoteDesktopGatewaySG
    Properties:
      GroupDescription: SonarQube Security Group
      GroupName: SonarQubeSG
      VpcId: !Ref 'ThreatAlertVPC'
      Tags:
        - Key: Name
          Value: ThreatAlert-SonarQube-SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          SourceSecurityGroupId: !Ref 'RemoteDesktopGatewaySG'
          FromPort: '22'
          ToPort: '22'
        - IpProtocol: tcp
          SourceSecurityGroupId: !Ref 'RemoteDesktopGatewaySG'
          FromPort: '9000'
          ToPort: '9000'
  OpsAlertSG:
    Type: AWS::EC2::SecurityGroup
    DependsOn: RemoteDesktopGatewaySG
    Properties:
      GroupDescription: Splunk Base Security Group
      GroupName: OpsAlertSG
      VpcId: !Ref 'ThreatAlertVPC'
      Tags:
        - Key: Name
          Value: OpsAlert-sg
      SecurityGroupIngress:
        - IpProtocol: tcp
          SourceSecurityGroupId: !Ref 'RemoteDesktopGatewaySG'
          FromPort: '22'
          ToPort: '22'
        - IpProtocol: tcp
          SourceSecurityGroupId: !Ref 'RemoteDesktopGatewaySG'
          FromPort: '80'
          ToPort: '80'

  NessusSG:
    Type: AWS::EC2::SecurityGroup
    DependsOn: RemoteDesktopGatewaySG
    Properties:
      GroupDescription: Nessus Base Security Group
      GroupName: NessusSecurityGroup
      VpcId: !Ref 'ThreatAlertVPC'
      Tags:
        - Key: Name
          Value: Nessus-sg
      SecurityGroupIngress:
        - IpProtocol: tcp
          SourceSecurityGroupId: !Ref 'RemoteDesktopGatewaySG'
          FromPort: '22'
          ToPort: '22'
        - IpProtocol: tcp
          SourceSecurityGroupId: !Ref 'RemoteDesktopGatewaySG'
          FromPort: '443'
          ToPort: '443'      
        - IpProtocol: tcp
          SourceSecurityGroupId: !Ref 'RemoteDesktopGatewaySG'
          FromPort: '8834'
          ToPort: '8834'      
        - IpProtocol: tcp
          SourceSecurityGroupId: !Ref 'RemoteDesktopGatewaySG'
          FromPort: '4120'
          ToPort: '4120'               
        - IpProtocol: tcp
          SourceSecurityGroupId: !Ref 'RemoteDesktopGatewaySG'
          FromPort: '4122'
          ToPort: '4122'          
  OktaSG:
    Type: AWS::EC2::SecurityGroup
    DependsOn: RemoteDesktopGatewaySG
    Properties: 
      GroupDescription: Okta Base Security Group
      GroupName: OktaSecurityGroup
      VpcId: !Ref 'ThreatAlertVPC'
      Tags: 
        - Key: Name
          Value: Okta-sg
      SecurityGroupIngress:
        - IpProtocol: tcp
          SourceSecurityGroupId: !Ref 'RemoteDesktopGatewaySG'
          FromPort: '3389'
          ToPort: '3389'
        - IpProtocol: tcp
          SourceSecurityGroupId: !Ref 'RemoteDesktopGatewaySG'
          FromPort: '443'
          ToPort: '443'      
  JiraSG:
    Type: AWS::EC2::SecurityGroup
    DependsOn: RemoteDesktopGatewaySG
    Properties: 
      GroupDescription: JIRA Base Security Group
      GroupName: JiraSecurityGroup
      VpcId: !Ref 'ThreatAlertVPC'
      Tags: 
        - Key: Name
          Value: Jira-sg
      SecurityGroupIngress:
        - IpProtocol: tcp
          SourceSecurityGroupId: !Ref 'RemoteDesktopGatewaySG'
          FromPort: '3389'
          ToPort: '3389'
        - IpProtocol: tcp
          SourceSecurityGroupId: !Ref 'RemoteDesktopGatewaySG'
          FromPort: '8080'
          ToPort: '8080'  
        - IpProtocol: tcp
          SourceSecurityGroupId: !Ref 'RemoteDesktopGatewaySG'
          FromPort: '8090'
          ToPort: '8090'         
  AcunetixSG:
    Type: AWS::EC2::SecurityGroup
    DependsOn: RemoteDesktopGatewaySG
    Properties: 
      GroupDescription: Acunetix Base Security Group
      GroupName: AcunetixSecurityGroup
      VpcId: !Ref 'ThreatAlertVPC'
      Tags: 
        - Key: Name
          Value: Acunetix-sg
      SecurityGroupIngress:
        - IpProtocol: tcp
          SourceSecurityGroupId: !Ref 'RemoteDesktopGatewaySG'
          FromPort: '3389'
          ToPort: '3389'
        - IpProtocol: tcp
          SourceSecurityGroupId: !Ref 'RemoteDesktopGatewaySG'
          FromPort: '3443'
          ToPort: '3443'  
        - IpProtocol: tcp
          SourceSecurityGroupId: !Ref 'RemoteDesktopGatewaySG'
          FromPort: '8090'
          ToPort: '8090'         

  EnableGuardduty: 
    Type: AWS::GuardDuty::Detector
    Properties: 
      Enable: True
Outputs: 
  SonarQubeSG:
    Value: !Ref SonarQubeSG
  OpsAlertSG: 
    Value: !Ref OpsAlertSG
  NessusSG:
    Value: !Ref NessusSG
  OktaSG:
    Value: !Ref OktaSG
  JiraSG:
    Value: !Ref JiraSG
  AcunetixSG:
    Value: !Ref AcunetixSG  
  ThreatAlertSubnetSelection:
    Value: !Ref ThreatAlertSubnetSelection
  ThreatAlertGSSProfile:
    Value: !Ref ThreatAlertGSSProfile
  ThreatAlertVPC:
    Value: !Ref ThreatAlertVPC 
  DBISubnet1: 
    Value: !Ref DBISubnet1
  DBISubnet2: 
    Value: !Ref DBISubnet2  
  ThreatAlertSN1:
    Value: !Ref ThreatAlertSN1


  # BastionServer:
  #   Type: AWS::EC2::Instance
  #   Metadata:
  #     AWS::Cloudformation::Init:
  #       configSets:
  #         config:
  #           - setup
  #           - installADDS
  #           - finalize
  #       setup:
  #         files:
  #           c:\cfn\cfn-hup.conf:
  #             content: !Sub |
  #               [main]
  #               stack=${AWS::StackId}
  #               region=${AWS::Region}
  #           c:\cfn\hooks.d\cfn-auto-reloader.conf:
  #             content: !Sub |
  #               [cfn-auto-reloader-hook]
  #               triggers=post.update
  #               path=Resources.BastionServer.Metadata.AWS::CloudFormation::Init
  #               action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfig --configsets full_install --region ${AWS::Region}
  #         services:
  #           windows:
  #             cfn-hup:
  #               enabled: 'true'
  #               ensureRunning: 'true'
  #               files:
  #                 - c:\cfn\cfn-hup.conf
  #                 - c:\cfn\hooks.d\cfn-auto-reloader.conf
      
        
  #       installADDS:
  #         commands:
  #           1-install-prereqs:
  #             command: powershell.exe -Command "Install-WindowsFeature RSAT-AD-Powershell, RSAT-ADDS-Tools;"
  #             waitAfterCompletion: '0'
            
  #           2-import-module:
  #             command: powershell.exe -ExecutionPolicy Bypass -Command Import-Module ActiveDirectory
            
  #           3-create-adminuser: 
  #             command: !Join
  #             - '' 
  #             - - powershell.exe -ExecutionPolicy Bypass -Command 'YO' > C:\Users\public\output.txt             
                  
  #             waitAfterCompletion: '0'
           
          
  #       finalize:
  #           1-signal-success:
  #             command: powershell.exe -Command "Write-AWSQuickStartStatus"
  #             waitAfterCompletion: '0'

  #   Properties:
  #     ImageId:
  #       Fn::FindInMap:
  #       - "AWSAMIRegionMap"
  #       - Ref: "AWS::Region"
  #       - "WS2016FULLBASE"
  #     InstanceType: t2.medium
  #     SsmAssociations: 
  #       -
  #         DocumentName: 
  #           Ref: "ThreatAlertSSMDoc"
          
  #     KeyName: !Ref 'KeyNameN'
  #     UserData: !Base64
  #       Fn::Join:
  #         - ''
  #         - - "<script>\n"
  #           - 'cfn-init.exe -v -c config -s '
  #           - !Ref 'AWS::StackId'
  #           - ' -r BastionServer'
  #           - ' --region '
  #           - !Ref 'AWS::Region'
  #           - "\n"
  #           - "</script>\n"
  #     NetworkInterfaces:
  #       - AssociatePublicIpAddress: "true"
  #         DeviceIndex: "0"
  #         GroupSet:
  #           - Ref: "RemoteDesktopGatewaySG"
  #         SubnetId:
  #           Ref: 'ThreatAlertSN1'
  #     IamInstanceProfile: !Ref 'ThreatAlertHostProfile'
  #     BlockDeviceMappings:
  #       - DeviceName: /dev/xvda
  #         Ebs:
  #           Encrypted: True
  #           VolumeSize: 100
  #     Tags:
  #       - Key: Name
  #         Value: Bastion-Server
  #       - Key: Classification
  #         Value: !Ref 'FedClassification'
  #   DependsOn: 
  #     - ThreatAlertDirectory
  #     - ThreatAlertSSMDoc